let nlp;_5ca‍.w("compromise",[["default",["nlp"],function(v){nlp=v}]]);const News = require("../models/news");
const slugify = require("slugify");
const Tag = require('../models/tag');
const moment = require('moment'); 
const mongoose = require('mongoose');


exports.create = async (req, res) => {
    try {
        if (req.body.title) {
            req.body.slug = slugify(req.body.title);
            const newProduct = await new News(req.body).save();
            res.json(newProduct);
        } else {
            res.status(400).json({
                err: 'No Title Found',
            });
        }

    } catch (err) {
        _5ca‍.g.console.log(err);
        // res.status(400).send("Create product failed");
        res.status(400).json({
            err: err.message,
        });
    }
};

exports.list = async (req, res) =>
    res.json(await News.find({}).sort({ createdAt: -1 }).exec());


exports.saveNews = async (req, res) => {
    try {
        const tagsArray = req.body; // Assuming the array of tags is sent in the request body        

        for (const tag of tagsArray) {
            // Check if tag already exists to avoid duplicates
            const existingTag = await News.findOne({ title: tag.title }).exec();
            if (!existingTag) {
                const newTag = new News(tag);
                await newTag.save();
            }
        }

        return res.status(200).json({
            message: "All news have been saved successfully"
        });
    } catch (error) {
        _5ca‍.g.console.error("Error saving tags:", error);
        return res.status(500).json({
            message: "Error saving tags",
            error: error
        });
    }
};

exports.readFeatured = async (req, res) => {
    try {

        let products = await Tag.find({ featured: true })
            .sort([["createdAt", "desc"]])
            .exec();

        return res.json(products);
    }
    catch (error) {
        _5ca‍.g.console.error("Error saving tags:", error);
        return res.status(500).json({
            message: "Error reading tags",
            error: error
        });
    }
}


exports.getWeeklyNewsByTag = async (req, res) => {
    try {
        const startOfWeek = moment().startOf('week').toDate();
        const endOfWeek = moment().endOf('week').toDate();

        const newsByTag = await News.aggregate([
            // Match news in the current week
            { $match: { createdAt: { $gte: startOfWeek, $lte: endOfWeek } } },

            // Unwind the tags array
            { $unwind: "$tags" },

            // Group by each tag and get the first news item for each tag
            { $group: {
                _id: "$tags",
                news: { $first: "$$ROOT" }
            }},

            // Lookup to get tag details
            {
                $lookup: {
                    from: "tags", // Assuming the collection name in MongoDB is 'tags'
                    localField: "_id",
                    foreignField: "_id",
                    as: "tagDetails"
                }
            },

            // Unwind the tagDetails array
            { $unwind: "$tagDetails" },

            // Project the required fields
            { $project: {
                _id: 0,
                tagName: "$tagDetails.name",
                news: 1
            }}
        ]);

        res.json(newsByTag);
    } catch (error) {
        _5ca‍.g.console.error("Error fetching weekly news by tag:", error);
        res.status(500).json({ message: "Server error" });
    }
};
